#!/usr/bin/python3
'''
Kill a file transfer
'''
import signal
import psutil
from argsparser import TerminateArgsParser
from config import LOG_PATH, ERROR_PATH


def __parse_cmdline(cmdline):
    '''
    从命令中解析出[user, address, src_path, dst_path]
    '''
    info = {'rsync': False, 
            'user': '',
            'address': '', 
            'src_path': '', 
            'dst_path': ''
        }

    if cmdline[0] != 'rsync':
        return info
    info['rsync'] = True

    # pylint: disable=C0200
    for index in range(len(cmdline)):
        content = cmdline[index]
        # 解析 user@addtess:dst_path
        if '@' in content and ':' in content:
            info['user'] = content.split('@')[0]
            info['address'] = content.split('@')[1].split(':')[0]
            info['dst_path'] = content.split(':')[1]
            # 解析 src_path，即user@addtess:dst_path的前面
            info['src_path'] = cmdline[index - 1]
            break

    return info


def close_process_by_filepath(filepath: str, output_path: str, error_path: str, address: str, user: str):
    '''
    关闭命令中含有该文件路径的进程
    '''
    for process in psutil.process_iter():
        try:
            cmdline = process.cmdline()
            cmd_info = __parse_cmdline(cmdline)

            # 当命令中含有rsync、文件路径，并且目的地址对应的上、用户对应的上
            if cmd_info['rsync'] and cmd_info['user'] == user and cmd_info['address'] == address and cmd_info['src_path'] in filepath:
                # print(cmd_info)
                process.send_signal(signal.SIGINT)
                with open(output_path, 'a', encoding='utf-8') as file_stream:
                    file_stream.write(f'kill transfer: {cmdline}\n')
                break
        except Exception as exception:
            with open(error_path, 'a', encoding='utf-8') as file_stream:
                file_stream.write(f'kill transfer error: {exception}\n')


if __name__ == '__main__':

    # 获取参数
    args = TerminateArgsParser().get_args_parser().parse_args()

    # 停止进程
    close_process_by_filepath(
        args.source, LOG_PATH, ERROR_PATH, args.address, args.user)
