#!/usr/bin/python3
'''
Start a file transfer asynchronously
'''
# pylint: disable=C0103
import os
import sys
from subprocess import PIPE, Popen
from scow_sync import utils, config

if __name__ == '__main__':

    args = utils.args_parser.start_args_parse()

    # if check is enabled, check whether password-free and return immediately
    if args.check:
        if not os.path.exists(args.sshkey_path):
            sys.stdout.write('false')
        else:
            cmd = f'ssh -p {args.port} -i {args.sshkey_path} \
                -o PreferredAuthentications=publickey,keyboard-interactive -o PubkeyAuthentication=yes \
                {args.user}@{args.address} echo hello'
            popen = Popen(cmd, shell=True, stdout=PIPE, stderr=PIPE)
            # wait sub process
            stdout, stderr = popen.communicate()
            if not stdout:
                sys.stdout.write('false')
            else:
                last_line = stdout.decode('utf-8').splitlines()[-1]
                # print(last_line)
                if last_line != 'hello':
                    sys.stdout.write('false')
                else:
                    sys.stdout.write('true')
        sys.exit(0)

    # initialize the folder where the output message are saved
    if not os.path.exists(config.OUTPUT_PATH):
        os.makedirs(config.OUTPUT_PATH, 0o700)
    if not os.path.exists(config.LOG_PATH):
        with open(config.LOG_PATH, 'a', encoding='utf-8') as out:
            out.write('This is the tranferring log for scow-sync\n')
        os.chmod(config.LOG_PATH, 0o700)
    if not os.path.exists(config.ERROR_PATH):
        with open(config.ERROR_PATH, 'a', encoding='utf-8') as err:
            err.write('This is the error log for scow-sync\n')
        os.chmod(config.ERROR_PATH, 0o700)

    # construct sub process to exe scow-sync for background
    cmd = f'scow-sync -a {args.address} -u {args.user} -s {args.source} -d {args.destination} \
        -m {args.max_depth} -p {args.port} -k {args.sshkey_path}'

    popen = Popen(cmd, shell=True, stdout=open(
        config.LOG_PATH, 'a', encoding='utf-8'), stderr=open(config.ERROR_PATH, 'a', encoding='utf-8'))

    sys.exit()
