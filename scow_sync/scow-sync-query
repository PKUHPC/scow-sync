#!/usr/bin/python3
'''
query the progress of file transfered
'''
# pylint: disable=C0103
import json
import os
import sys
from subprocess import PIPE, CalledProcessError, Popen
import config


def process_file(file_path):
    '''
    parse the output of rsync
    '''
    if os.path.exists(file_path):
        try:
            tail_progress = Popen(
                ['tail', '-n', '2', file_path], stdout=PIPE, stderr=PIPE)
            stdout, stderr = tail_progress.communicate()

            head_progress = Popen(
                ['head', '-n', '1', file_path], stdout=PIPE, stderr=PIPE)
            # pylint: disable=W0612
            stdout_head, stderr_head = head_progress.communicate()

            sys.stderr.write(stderr.decode('utf-8'))
            sys.stderr.flush()

            # stdout: filename\n\r xxx \r xxx \r xxx \r
            if stdout != '':
                lines = stdout.decode('utf-8')
                if '%' not in lines:  # print progress not started
                    return None

                lines_list = lines.split('\n')

                base_name = lines_list[0]

                recv_address = ''
                father_path = ''
                if stdout_head != '':
                    head_lines = stdout_head.decode('utf-8')
                    head_lines_list = head_lines.split()
                    recv_address = head_lines_list[0]
                    father_path = head_lines_list[1]

                progress_parts = lines_list[1].split('\r')[-1].split()
                file_path = os.path.join(father_path, base_name)
                transfer_size = progress_parts[0]
                transfer_progress = progress_parts[1]
                speed = progress_parts[2]
                time = progress_parts[3]
                return {"recvAddress": recv_address,
                        "filePath": file_path, 
                        "transferSize": transfer_size, 
                        "progress": transfer_progress, 
                        "speed": speed, 
                        "leftTime": time
                        }
            else:
                return None
        except CalledProcessError:
            return None


def traverse_folder(folder_path):
    '''
    traverse SCOWSYNC_PATH
    '''
    progresses = []
    # pylint: disable=W0612
    for root, dirs, files in os.walk(folder_path):
        for directory in dirs:
            # 排除ssh连接池文件夹
            if directory.endswith('_ssh_conn'):
                continue
            transfer_id = os.path.join(root, directory)
            for file in os.listdir(transfer_id):
                file_path = os.path.join(transfer_id, file)
                progress_info = process_file(file_path)
                if progress_info:
                    progresses.append(progress_info)
    return progresses


if __name__ == '__main__':

    sys.stdout.write(json.dumps(traverse_folder(config.OUTPUT_PATH)))
    sys.stdout.flush()

    sys.exit()
